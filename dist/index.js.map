{"version":3,"sources":["../src/tools/loaders/loader-tools.ts","../src/tools/print/print-tools.ts","../src/utils.ts","../src/tools/strings/string-tools.ts","../src/tools/system/system-tools.ts"],"names":["Spinner","kleur","loader","promise","title","spinner","result","error","newline","divider","message","content","success","warning","info","fancy","debug","topLine","botLine","highlight","muted","checkmark","xmark","print","head","a","tail","is","Ctor","val","camel","snake","dash","pluralize_fn","camelCase","snakeCase","kebabCase","upperCase","value","lowerCase","args","upperFirst","lowerFirst","pad","word","length","chars","padding","padStart","padEnd","repeat","sourceString","numberOfTimes","startCase","wrd","trim","trimStart","trimEnd","pluralize","count","inclusive","rule","replacement","single","plural","isNotString","isBlank","identity","pascalCase","strings","execa","run","command","options","res","exec","commandLine","resolve","reject","startTimer","started","system"],"mappings":"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","sourcesContent":["import { Spinner } from \"@topcli/spinner\";\r\nimport kleur from \"kleur\";\r\n\r\nexport async function loader<T>(promise: Promise<T>,title?:string): Promise<T> {\r\n    const spinner = new Spinner().start(\"Start working!\");\r\n    spinner.text = title ? title +\" running...\":\"task running...\"\r\n    try {\r\n        const result = await promise;\r\n        spinner.succeed(kleur.green(\"✔︎\"));\r\n        return result;\r\n    } catch (error:any) {\r\n        spinner.failed(kleur.red(title+\"taks failed\"));\r\n        console.log(kleur.red(error.messge))\r\n    throw error;\r\n    }\r\n}\r\n","import {GluegunPrint} from \"./print-types.ts\";\nimport kleur from \"kleur\";\n\n/**\n * Print a blank line.\n */\nfunction newline() {\n  console.log(\"\");\n}\n\n/**\n * Prints a divider line\n */\nfunction divider() {\n  console.log(kleur.yellow(\"---------------------------------------------------------------\"));\n}\n\nexport function error(message: string, ...content: any) {\n  console.log(kleur.red(message), content);\n}\n\nexport function success(message: string, ...content: any) {\n  console.log(kleur.green(message), content);\n}\n\nexport function warning(message: string, ...content: any) {\n  console.log(kleur.yellow(message), content);\n}\n\nexport function info(message: string, ...content: any) {\n  console.log(kleur.blue(message), content);\n}\n\nfunction fancy(message: any): void {\n  console.log(message);\n}\n\nfunction debug(message: string, title = \"DEBUG\"): void {\n  const topLine = `vvv -----[ ${title} ]----- vvv`;\n  const botLine = `^^^ -----[ ${title} ]----- ^^^`;\n\n  console.log(kleur.magenta(topLine));\n  console.log(message);\n  console.log(kleur.magenta(botLine));\n}\n\nfunction highlight(message: string): void {\n  console.log(kleur.bold(message));\n}\n\nfunction muted(message: string): void {\n  console.log(kleur.bgCyan(message));\n}\n\n\n\nconst checkmark = kleur.green(\"✔︎\");\nconst xmark = kleur.red(\"ⅹ\");\n\nconst print: GluegunPrint = {\n  newline,\n  divider,\n  fancy,\n  info,\n  error,\n  warning,\n  debug,\n  success,\n  highlight,\n  muted,\n  checkmark,\n  xmark,\n};\n\nexport { print, GluegunPrint };\n","/**\n * Internal tools for use within Gluegun\n */\n\nfunction head<T>(a: T[]): T {\n  return a[0];\n}\n\nfunction tail<T>(a: T[]): T[] {\n  return a.slice(1);\n}\n\nfunction identity<T>(a: T): T {\n  return a;\n}\n\nfunction isNil(a: any): boolean {\n  return a === null || a === undefined;\n}\n\nfunction split(b: string, a: string): string[] {\n  return a.split(b);\n}\n\nfunction trim(a: string): string {\n  return a.trim();\n}\n\nfunction forEach<T>(f: (i: T) => void, a: T[]): void {\n  a.forEach(f);\n}\n\nfunction keys<T = unknown>(a: T): string[] {\n  if (Object(a) !== a) {\n    return [];\n  }\n  // @ts-expect-error\n  return Object.keys(a);\n}\n\nfunction replace(b: string | RegExp, c: string, a: string): string {\n  return a.replace(b, c);\n}\n\nfunction last<T>(a: T[]): T {\n  return a[a.length - 1];\n}\n\nfunction reject<T>(f: (i: T) => boolean, a: T[]): T[] {\n  return a.filter((b) => !f(b));\n}\n\nfunction is(Ctor: any, val: any): boolean {\n  return (val != null && val.constructor === Ctor) || val instanceof Ctor;\n}\n\nfunction takeLast<T>(n: number, a: T[]): T[] {\n  return a.slice(-1 * n);\n}\n\nfunction equals(a: string[], b: string[]): boolean {\n  return a.length === b.length && a.every((v, i) => v === b[i]);\n}\n\nfunction times(fn: (i: any) => any, n: number): any[] {\n  const list = new Array(n);\n  for (let i = 0; i < n; i++) {\n    list[i] = fn(i);\n  }\n  return list;\n}\n\nfunction prop(p: string, obj: unknown): any {\n  if(!obj) return undefined;\n  if(typeof obj !== 'object') return obj;\n  if(!obj.hasOwnProperty(p)) return undefined;\n  // @ts-expect-error\n  return obj[p];\n  \n}\n\nexport {\n  head,\n  identity,\n  isNil,\n  split,\n  tail,\n  trim,\n  forEach,\n  keys,\n  replace,\n  last,\n  reject,\n  is,\n  takeLast,\n  equals,\n  times,\n  prop,\n};\n","import { GluegunStrings } from \"./strings-types.js\";\nimport { is } from \"@/utils.ts\";\nimport { camel, snake, dash} from \"radash\";\nimport pluralize_fn from \"pluralize\"\n      \n\nconst camelCase = camel;\nconst snakeCase = snake;\nconst kebabCase = dash;\n\n/**\n * Converts a string to uppercase.\n *\n * @param {string} value - The string to convert.\n * @return {string} - The converted string in uppercase.\n */\nfunction upperCase(value: string): string {\n  return value.toUpperCase();\n}\n\n/**\n * Converts a string to lowercase.\n *\n * @param {string} args - The string to be converted.\n * @return {string} The lowercase version of the input string.\n */\nfunction lowerCase(args: string): string {\n  return args.toLowerCase();\n}\n\n/**\n * Capitalizes the first letter of a string.\n *\n * @param {string} value - The string to capitalize.\n * @return {string} - The capitalized string.\n */\nfunction upperFirst(value: string): string {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n}\n\n/**\n * Converts the first character of a string to lowercase.\n *\n * @param {string} args - The string to convert.\n * @return {string} - The converted string.\n */\nfunction lowerFirst(args: string) {\n  return args.charAt(0).toLowerCase() + args.slice(1);\n}\n\n/**\n * Pads a given word with a specified length of characters on both sides.\n *\n * @param {string} word - The word to pad.\n * @param {number} length - The desired length of the padded word.\n * @param {string} [chars] - The characters to use for padding. If not provided, spaces will be used.\n * @return {string} - The padded word.\n */\nfunction pad(word: string, length: number, chars?: string) {\n  const padding = chars ?? \" \".repeat(length);\n  return padding + word + padding;\n}\n\n/**\n * Pads the start of a string with a specified character or space to a specified length.\n *\n * @param {string} word - The string to pad.\n * @param {number} length - The target length of the padded string.\n * @param {string} [chars] - The character to use for padding. Defaults to a space.\n * @return {string} - The padded string.\n */\nfunction padStart(word: string, length: number, chars?: string) {\n  const padding = chars ?? \" \".repeat(length);\n  return padding + word;\n}\n\n/**\n * Pads the end of a string with a specified character or a space.\n *\n * @param {string} word - The string to pad.\n * @param {number} length - The target length of the string.\n * @param {string} [chars] - The character to pad the string with. Defaults to a space.\n * @return {string} - The padded string.\n */\n\n/**\n * Pads the end of a word with a specified character or space to a specified length.\n *\n * @param {string} word - The word to be padded.\n * @param {number} length - The desired length of the padded word.\n * @param {string} [chars] - The character to be used for padding. Defaults to space.\n * @return {string} - The padded word.\n */\nfunction padEnd(word: string, length: number, chars?: string) {\n  const padding = chars ?? \" \".repeat(length);\n  return word + padding;\n}\n/**\n * Repeats a given source string a specified number of times.\n *\n * @param {string} sourceString - The string to be repeated.\n * @param {number} numberOfTimes - The number of times the string should be repeated.\n * @return {string} The repeated string.\n */\n\n/**\n * Repeats a given source string a specified number of times.\n *\n * @param {string} sourceString - The string to be repeated.\n * @param {number} numberOfTimes - The number of times the string should be repeated.\n * @return {string} The resulting string after repeating the source string.\n */\nfunction repeat(sourceString: string, numberOfTimes: number) {\n  return sourceString.repeat(numberOfTimes);\n}\n\n/**\n * Converts a given word to start case.\n *\n * @param {string} word - The word to be converted.\n * @return {string} The word in start case.\n */\nfunction startCase(word: string) {\n  const words = word.split(\" \");\n  return words\n    .map((wrd) => {\n      return wrd.charAt(0).toUpperCase() + wrd.slice(1);\n    })\n    .join(\" \");\n}\n\n/**\n * Trims whitespace from both ends of a string.\n *\n * @param {string} sourceString - The string to be trimmed.\n * @param {string} [chars] - The characters to be trimmed. Defaults to whitespace.\n * @return {string} The trimmed string.\n */\nfunction trim(sourceString: string) {\n  return sourceString.trim();\n}\n/**\n * Strips whitespace from the start of a string.\n */\nfunction trimStart(sourceString: string) {\n  return sourceString.trimStart();\n}\n/**\n * Strips whitespace from the end of a string.\n */\nfunction trimEnd(sourceString: string) {\n  return sourceString.trimEnd();\n}\n\nconst pluralize = (word: string, count?: number, inclusive?: boolean) =>\n  pluralize_fn(word, count, inclusive);\npluralize.plural = (word: string) => pluralize_fn.plural(word);\npluralize.singular = (word: string) => pluralize_fn.singular(word);\n\npluralize.addPluralRule = (rule: string | RegExp, replacement: string) =>\n  pluralize_fn.addPluralRule(rule, replacement);\npluralize.addSingularRule = (rule: string | RegExp, replacement: string) =>\n  pluralize_fn.addSingularRule(rule, replacement);\n\npluralize.addIrregularRule = (single: string, plural: string) =>\n  pluralize_fn.addIrregularRule(single, plural);\npluralize.addUncountableRule = (word: string | RegExp) =>\n  pluralize_fn.addUncountableRule(word);\npluralize.isPlural = (word: string) => pluralize_fn.isPlural(word);\npluralize.isSingular = (word: string) => pluralize_fn.isSingular(word);\n\n/**\n * Is this not a string?\n *\n * @param value The value to check\n * @return True if it is not a string, otherwise false\n */\nfunction isNotString(value: any): boolean {\n  return !is(String, value);\n}\n\n/**\n * Is this value a blank string?\n *\n * @param value The value to check.\n * @returns True if it was, otherwise false.\n */\nfunction isBlank(value: any): boolean {\n  return isNotString(value) || trim(value) === \"\";\n}\n\n/**\n * Returns the value it is given\n *\n * @param value\n * @returns the value.\n */\nfunction identity(value: any): any {\n  return value;\n}\n\n/**\n * Converts the value ToPascalCase.\n *\n * @param value The string to convert\n * @returns PascalCase string.\n */\nfunction pascalCase(value: string): string {\n  return upperFirst(camelCase(value));\n}\n\nexport { GluegunStrings };\n\nexport const strings: GluegunStrings = {\n  isNotString,\n  isBlank,\n  identity,\n  pascalCase,\n  camelCase,\n  kebabCase,\n  lowerCase,\n  lowerFirst,\n  pad,\n  padEnd,\n  padStart,\n  repeat,\n  snakeCase,\n  startCase,\n  trim,\n  trimEnd,\n  trimStart,\n  upperCase,\n  upperFirst,\n  pluralize,\n  plural: pluralize.plural,\n  singular: pluralize.singular,\n  addPluralRule: pluralize.addPluralRule,\n  addSingularRule: pluralize.addSingularRule,\n  addIrregularRule: pluralize.addIrregularRule,\n  addUncountableRule: pluralize.addUncountableRule,\n  isPlural: pluralize.isPlural,\n  isSingular: pluralize.isSingular,\n};\n","import { GluegunSystem } from \"./system-types.ts\";\nimport { head, tail, isNil } from \"@/utils.js\";\nimport { execa, Options as ExecaOptions} from 'execa';\nimport kleur from \"kleur\";\n\nexport interface Options {\n  [key: string]: any;\n}\n\n\n/**\n * Executes a command asynchronously.\n *\n * @param {string} command - The command to be executed.\n * @param {readonly string[]} [args] - Optional arguments for the command.\n * @param {ExecaOptions<string>} [options] - Optional options for the execution.\n * @return {Promise<ExecaReturnValue<string>>} A promise that resolves to the result of the command execution.\n */\nexport async function run(command: string, args?: readonly string[] | undefined, options?: ExecaOptions<string> | undefined) {\n  try {\n    const res = await execa(command, args, options)\n    console.log(kleur.green(res?.command))\n    console.log(res?.stdout)\n    return res\n  } catch (error) {\n    console.log(\"error\", error)\n  }\n}\n\n\n\n\n/**\n * Executes a commandline via execa.\n *\n * @param commandLine The command line to execute.\n * @param options Additional child_process options for node.\n * @returns Promise with result.\n */\nasync function exec(commandLine: string, options: Options = {}): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const args = commandLine.split(\" \");\n    execa(head(args), tail(args), options)\n      .then((result: any) => resolve(result.stdout))\n      .catch((error: any) => reject(error));\n  });\n}\n\n/**\n * Starts a timer used for measuring durations.\n *\n * @return A function that when called will return the elapsed duration in milliseconds.\n */\nfunction startTimer(): () => number {\n  const started = process.uptime();\n  return () => Math.floor((process.uptime() - started) * 1000); // uptime gives us seconds\n}\n\nconst system: GluegunSystem = { exec, run, startTimer };\n\nexport { system, GluegunSystem };\n"]}