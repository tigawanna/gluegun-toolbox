import { Spinner } from '@topcli/spinner';
import o from 'kleur';
import { camel, snake, dash } from 'radash';
import s from 'pluralize';
import { execa } from 'execa';

async function x(n,r){let t=new Spinner().start("Start working!");t.text=r?r+" running...":"task running...";try{let e=await n;return t.succeed(o.green("\u2714\uFE0E")),e}catch(e){throw t.failed(o.red(r+"taks failed")),console.log(o.red(e.messge)),e}}function h(){console.log("");}function S(){console.log(o.yellow("---------------------------------------------------------------"));}function R(n,...r){console.log(o.red(n),r);}function k(n,...r){console.log(o.green(n),r);}function w(n,...r){console.log(o.yellow(n),r);}function P(n,...r){console.log(o.blue(n),r);}function C(n){console.log(n);}function E(n,r="DEBUG"){let t=`vvv -----[ ${r} ]----- vvv`,e=`^^^ -----[ ${r} ]----- ^^^`;console.log(o.magenta(t)),console.log(n),console.log(o.magenta(e));}function v(n){console.log(o.bold(n));}function G(n){console.log(o.bgCyan(n));}var O=o.green("\u2714\uFE0E"),U=o.red("\u2179"),L={newline:h,divider:S,fancy:C,info:P,error:R,warning:w,debug:E,success:k,highlight:v,muted:G,checkmark:O,xmark:U};function c(n){return n[0]}function g(n){return n.slice(1)}function d(n,r){return r!=null&&r.constructor===n||r instanceof n}var p=camel,z=snake,B=dash;function F(n){return n.toUpperCase()}function $(n){return n.toLowerCase()}function f(n){return n.charAt(0).toUpperCase()+n.slice(1)}function j(n){return n.charAt(0).toLowerCase()+n.slice(1)}function q(n,r,t){let e=t??" ".repeat(r);return e+n+e}function D(n,r,t){return (t??" ".repeat(r))+n}function M(n,r,t){let e=t??" ".repeat(r);return n+e}function _(n,r){return n.repeat(r)}function H(n){return n.split(" ").map(t=>t.charAt(0).toUpperCase()+t.slice(1)).join(" ")}function m(n){return n.trim()}function J(n){return n.trimStart()}function K(n){return n.trimEnd()}var i=(n,r,t)=>s(n,r,t);i.plural=n=>s.plural(n);i.singular=n=>s.singular(n);i.addPluralRule=(n,r)=>s.addPluralRule(n,r);i.addSingularRule=(n,r)=>s.addSingularRule(n,r);i.addIrregularRule=(n,r)=>s.addIrregularRule(n,r);i.addUncountableRule=n=>s.addUncountableRule(n);i.isPlural=n=>s.isPlural(n);i.isSingular=n=>s.isSingular(n);function y(n){return !d(String,n)}function Q(n){return y(n)||m(n)===""}function V(n){return n}function W(n){return f(p(n))}var X={isNotString:y,isBlank:Q,identity:V,pascalCase:W,camelCase:p,kebabCase:B,lowerCase:$,lowerFirst:j,pad:q,padEnd:M,padStart:D,repeat:_,snakeCase:z,startCase:H,trim:m,trimEnd:K,trimStart:J,upperCase:F,upperFirst:f,pluralize:i,plural:i.plural,singular:i.singular,addPluralRule:i.addPluralRule,addSingularRule:i.addSingularRule,addIrregularRule:i.addIrregularRule,addUncountableRule:i.addUncountableRule,isPlural:i.isPlural,isSingular:i.isSingular};async function Z(n,r,t){try{let e=await execa(n,r,t);return console.log(o.green(e?.command)),console.log(e?.stdout),e}catch(e){console.log("error",e);}}async function nn(n,r={}){return new Promise((t,e)=>{let l=n.split(" ");execa(c(l),g(l),r).then(u=>t(u.stdout)).catch(u=>e(u));})}function rn(){let n=process.uptime();return ()=>Math.floor((process.uptime()-n)*1e3)}var tn={exec:nn,run:Z,startTimer:rn};

export { x as loader, L as print, X as strings, tn as system };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map